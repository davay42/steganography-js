{"version":3,"sources":["context/LangContext.ts","components/CanvasSection/CanvasSection.tsx","components/TextAreaSection/TextAreaSection.tsx","components/ProgressBar/ProgressBar.tsx","pages/Home.tsx","components/ColorSelector/ColorSelector.tsx","pages/Comparison.tsx","pages/Info.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["LangContext","createContext","key","CanvasSection","_canvas","createRef","_fileInput","state","fileName","fileLoaded","scale","phase","setState","handleFileChange","file","canvas","current","ctx","getContext","reader","FileReader","onload","clearRect","width","height","img","Image","imageSmoothingEnabled","drawImage","src","result","readAsDataURL","name","props","onFileLoaded","resetState","disableInput","value","updateImage","image","putImageData","downloadCanvas","Math","random","toFixed","toBlob","blob","FileSaver","saveAs","handleProcess","buffer","getImageData","data","process","processName","t","this","context","disableSecondaryButtons","clear","isAProcessActive","disablePrimaryButton","sourceFileLoaded","className","htmlFor","id","type","ref","onChange","e","target","files","hidden","hideCanvas","disabled","onClick","download","Component","contextType","TextAreaSection","_textArea","setText","text","string","JSON","stringify","payload","TextEncoder","encode","length","disableButtons","ProgressBar","useContext","active","style","progress","Home","_sourceCanvas","_resultCanvas","_resultTextArea","mode","sourceFileName","processActive","decoder","encoder","loaded","changeOutputMode","resetCanvas","document","getElementById","onDecoderMessage","progressBar","error","Noty","theme","layout","message","timeout","show","done","split","shift","TextDecoder","view","DataView","byteLength","parse","decode","Blob","resultText","join","typed","Uint8ClampedArray","resultImage","ImageData","time","terminate","setTimeout","params","Worker","onmessage","postMessage","onEncoderMessage","transferList","imageData","window","confirm","alert","console","proces","defaultChecked","bool","ColorSelector","r","g","b","a","getColor","setColor","selectColor","hexColor","hexToRgb","defaultValue","rgbToHex","backgroundColor","Object","values","hex","pop","bigint","parseInt","componentToHex","c","toString","Comparison","_colorSelector","_firstImage","_secondImage","firstFile","secondFile","differ","firstFileLoaded","secondFileLoaded","onDifferMessage","diff","firstImage","canvas2","secondImage","diffColor","first","second","gridColumnStart","gridRow","margin","Info","href","rel","Header","useState","basePath","currentPath","setCurrentPath","links","map","i","to","path","Footer","pages","App","translator","setTranslator","useEffect","i18next","init","lng","resources","translations","then","Provider","exact","render","Promise","fetch","File","FileList","navigator","deviceMemory","warn","hardwareConcurrency","ReactDOM"],"mappings":"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","file":"static/js/main.2874ac1c.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst fallbackTranslator: Function = (key: string) => `{${key}}`;\nconst LangContext = createContext(fallbackTranslator);\n\nexport default LangContext;\n","import React, { Component, createRef } from \"react\";\nimport FileSaver from \"file-saver\";\nimport LangContext from \"../../context/LangContext\";\n\ntype ScalePhase = \"in\" | \"out\" | \"initial\";\n\ninterface Props {\n    clear?: boolean;\n    disableInput?: boolean;\n    download?: any;\n    hideCanvas?: boolean;\n    id?: string;\n    isAProcessActive?: boolean;\n    sourceFileLoaded?: boolean;\n    processName?: ProcessType;\n    onFileLoaded?(bool: boolean, fileName: string): void;\n    process?(args: { process: string, image: ImagePayload }): void;\n}\n\ninterface State {\n    fileName: string;\n    fileLoaded: boolean;\n    scale: ScalePhase;\n}\n\nexport default class CanvasSection extends Component<Props, State> {\n    _canvas = createRef<HTMLCanvasElement>();\n    _fileInput = createRef<HTMLInputElement>();\n\n    state = {\n        fileName: \"\",\n        fileLoaded: false,\n        scale: \"initial\" as ScalePhase,\n    };\n\n    scale = (phase: ScalePhase) => {\n        this.setState({ scale: phase });\n    }\n\n    handleFileChange = (file?: File) => {\n        const canvas = this._canvas.current!;\n        const ctx = canvas.getContext(\"2d\")!;\n\n        // Is there a file?\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                // Create a new image from the input file\n                let img = new Image();\n                img.onload = () => {\n                    canvas.height = img.height;\n                    canvas.width = img.width;\n                    ctx.imageSmoothingEnabled = false;\n                    ctx.drawImage(img, 0, 0);\n                };\n                img.src = reader.result as string;\n            };\n            reader.readAsDataURL(file);\n\n            this.setState({ fileName: file.name, fileLoaded: true });\n            this.props.onFileLoaded?.(true, file.name);\n        } else {\n            this.setState({ fileName: \"\", fileLoaded: false });\n            this.props.onFileLoaded?.(false, \"\");\n            // Reset canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            canvas.height = 150;\n            canvas.width = 300;\n        }\n    }\n\n    resetState = () => {\n        this.setState({ fileName: \"\", fileLoaded: false });\n        if (!this.props.disableInput && this._fileInput.current) {\n            this._fileInput.current.value = \"\";\n        }\n        // Reset canvas\n        const canvas = this._canvas.current!;\n        const ctx = canvas.getContext(\"2d\")!;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        canvas.height = 150;\n        canvas.width = 300;\n    }\n\n    updateImage = (image: ImageData, fileName: string) => {\n        this.setState({ fileName: fileName, fileLoaded: true });\n\n        const canvas = this._canvas.current!;\n        const ctx = canvas.getContext(\"2d\")!;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        canvas.height = image.height;\n        canvas.width = image.width;\n        ctx.imageSmoothingEnabled = false;\n        ctx.putImageData(image, 0, 0);\n    }\n\n    downloadCanvas = () => {\n        // Create a random file name\n        const fileName = \"stegojs_\" + (Math.random() * 1000000).toFixed() + \"_\" +\n            this.state.fileName + \".bmp\";\n        const canvas = this._canvas.current!;\n        canvas.toBlob(function (blob) {\n            if (blob) {\n                FileSaver.saveAs(blob, fileName);\n            }\n        });\n    }\n\n    handleProcess = () => {\n        const canvas = this._canvas.current!;\n        const ctx = canvas.getContext(\"2d\")!;\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        // Grab the arrayBuffer of the imageData object\n        const buffer = imageData.data.buffer;\n\n        if (this.props.process && this.props.processName) {\n            this.props.process({\n                process: this.props.processName,\n                image: {\n                    buffer: buffer,\n                    width: canvas.width,\n                    height: canvas.height,\n                },\n            });\n        }\n    }\n\n    render() {\n        const t = this.context;\n\n        const disableSecondaryButtons = !this.props.clear ||\n            !this.state.fileLoaded ||\n            this.props.isAProcessActive;\n        const disablePrimaryButton = !this.props.sourceFileLoaded ||\n            !this.state.fileLoaded ||\n            this.props.isAProcessActive;\n\n        return (\n            <div className=\"CanvasSelection\">\n                {!this.props.disableInput && <div>\n                    <label className=\"label\" htmlFor={this.props.id + \"-input\"}>\n                        {t(\"image_input:select_file\")}\n                    </label>\n                    <br />\n                    <input\n                        type=\"file\"\n                        id={this.props.id + \"-input\"}\n                        ref={this._fileInput}\n                        onChange={(e) => this.handleFileChange(e.target.files?.[0])}\n                    />\n                </div>}\n                <br />\n\n                <div\n                    hidden={this.props.hideCanvas}\n                    className={\"section-content scale-transition scale-\" +\n                        this.state.scale}\n                >\n                    <label className=\"label\" htmlFor={this.props.id + \"-canvas\"}>\n                        {this.state.fileName || \"Image\"}\n                    </label>\n                    <canvas\n                        id={this.props.id + \"-canvas\"}\n                        ref={this._canvas}\n                    >\n                    </canvas>\n                </div>\n\n                <div className=\"section-actions secondary\">\n                    {this.props.clear &&\n                        <button\n                            className=\"waves-effect waves-light btn pink darken-1 black-text\"\n                            disabled={disableSecondaryButtons}\n                            onClick={() => this.resetState()}\n                        >\n                            {t(\"common:clear\")}\n                        </button>}\n                    {this.props.download &&\n                        <button\n                            className=\"waves-effect waves-light btn pink darken-1 black-text\"\n                            disabled={disableSecondaryButtons}\n                            onClick={() => this.downloadCanvas()}\n                        >\n                            {t(\"common:download\")}\n                        </button>}\n                </div>\n\n                <div className=\"section-actions\">\n                    {this.props.process &&\n                        <button\n                            className=\"waves-effect waves-light btn grey darken-4\"\n                            disabled={disablePrimaryButton}\n                            onClick={() => this.handleProcess()}\n                        >\n                            {(this.props.processName === \"encode\")\n                                ? (<i className=\"material-icons left\"></i>)\n                                : (<i className=\"material-icons right\"></i>)}\n                            {this.props.processName}\n                        </button>}\n                </div>\n            </div>\n        );\n    }\n}\n\nCanvasSection.contextType = LangContext;\n","import React, { Component, createRef } from \"react\";\nimport LangContext from \"../../context/LangContext\";\nimport \"./TextAreaSection.scss\";\n\ninterface Props {\n    clear?: any;\n    id?: string;\n    isAProcessActive?: boolean;\n    sourceFileLoaded?: boolean;\n    processName?: ProcessType;\n    onFileLoaded?(bool: boolean, fileName: string): void;\n    process?(args: { process: string, text: TextPayload }): void;\n}\n\nexport default class TextAreaSection extends Component<Props> {\n    _textArea = createRef<HTMLTextAreaElement>();\n\n    resetState = () => {\n        if (this._textArea.current) {\n            this._textArea.current.value = \"\";\n        }\n    }\n\n    setText = (text: string) => {\n        if (this._textArea.current) {\n            this._textArea.current.value = text;\n        }\n    }\n\n    handleProcess = () => {\n        const string = JSON.stringify(this._textArea.current?.value);\n        const uint8_array = new TextEncoder().encode(string);\n        const payload = uint8_array.buffer;\n\n        if (this.props.process && this.props.processName) {\n            this.props.process({\n                process: this.props.processName,\n                text: {\n                    buffer: payload,\n                    length: string.length,\n                },\n            });\n        }\n    }\n\n    render() {\n        const t = this.context;\n        const disableButtons = !this.props.sourceFileLoaded ||\n            this.props.isAProcessActive;\n\n        return (\n            <div className=\"TextAreaSelection\">\n                <div className=\"section-content input-field\">\n                    <label className=\"label\" htmlFor={this.props.id + \"-text\"}>\n                        {t(\"text_input:label\")} *\n                    </label>\n                    <br />\n                    <br />\n                    <textarea\n                        className=\"materialize-textarea textarea\"\n                        id={this.props.id + \"-text\"}\n                        ref={this._textArea}\n                    >\n                    </textarea>\n                    <span>\n                        * <small>{t(\"text_input:large_file_info\")}</small>\n                    </span>\n                </div>\n                <div className=\"section-actions secondary\">\n                    <button\n                        className=\"waves-effect waves-light btn pink darken-1 black-text\"\n                        disabled={this.props.isAProcessActive}\n                        onClick={() => this.resetState()}\n                    >\n                        {t(\"common:clear\")}\n                    </button>\n                </div>\n                <div className=\"section-actions\">\n                    <button\n                        className=\"waves-effect waves-light btn grey darken-4\"\n                        disabled={disableButtons}\n                        onClick={() => this.handleProcess()}\n                    >\n                        {this.props.processName}\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nTextAreaSection.contextType = LangContext;\n","import React, { useContext } from \"react\";\nimport LangContext from \"../../context/LangContext\";\nimport \"./ProgressBar.scss\";\n\ninterface Props {\n    id?: string;\n    active: boolean;\n    progress: number;\n}\n\nexport default function ProgressBar(props: Props) {\n    const t = useContext(LangContext);\n\n    return (\n        <div className=\"App-progress\" id={props.id || \"\"}>\n            <div className=\"progress-indicator-wrapper\">\n                <div\n                    className={\"grey darken-4 progress-indicator \" +\n                        (props.active ? \"active\" : \"\")}\n                    style={{ width: props.progress + \"%\" }}\n                >\n                </div>\n            </div>\n            <label className={`progress-description ${(props.active ? \"active\" : \"\")}`}>\n                <span>\n                    {(props.progress > 0)\n                        ? `${props.progress}%`\n                        : t(\"progress_bar:perf_info\")}\n                </span>\n            </label>\n        </div>\n    );\n}\n","import React, { Component, createRef } from \"react\";\nimport FileSaver from \"file-saver\";\nimport Noty from \"noty\";\nimport LangContext from \"../context/LangContext\";\nimport CanvasSection from \"../components/CanvasSection/CanvasSection\";\nimport TextAreaSection from \"../components/TextAreaSection/TextAreaSection\";\nimport ProgressBar from \"../components/ProgressBar/ProgressBar\";\n\ninterface State {\n    mode: AppMode;\n    sourceFileLoaded: boolean;\n    sourceFileName: string;\n    processActive: boolean;\n    progress: number;\n}\n\nexport default class Home extends Component<{}, State> {\n    _sourceCanvas = createRef<CanvasSection>();\n    _resultCanvas = createRef<CanvasSection>();\n    _resultTextArea = createRef<TextAreaSection>();\n\n    state = {\n        mode: \"image\" as AppMode,\n        sourceFileLoaded: false,\n        sourceFileName: \"\",\n        processActive: false,\n        progress: 0,\n    };\n\n    decoder: Worker | null = null;\n    encoder: Worker | null = null;\n\n    sourceFileLoaded = (loaded: boolean, fileName: string) => {\n        this.setState({ sourceFileLoaded: loaded, sourceFileName: fileName });\n    }\n\n    changeOutputMode = (mode: AppMode) => {\n        this.setState({ mode });\n    }\n\n    resetCanvas = () => {\n        const input = document.getElementById(\"source-input\") as HTMLInputElement;\n        input.value = \"\";\n\n        const canvas = document.getElementById(\"source-canvas\") as HTMLCanvasElement;\n        const ctx = canvas.getContext(\"2d\")!;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        canvas.height = 150;\n        canvas.width = 300;\n    }\n\n    onDecoderMessage = (e: MessageEvent) => {\n        if (e.data.progressBar) {\n            this.setState({ progress: e.data.progressBar });\n        }\n\n        if (e.data.error) {\n            this.setState({ processActive: false });\n            this.setState({ progress: 0 });\n\n            new Noty({\n                theme: \"nest\",\n                type: \"error\",\n                layout: \"topRight\",\n                text: this.context(\"notification:error_noty\", { message: e.data.error }),\n                timeout: 5000,\n            }).show();\n        }\n\n        if (e.data.done) {\n            this.setState({ progress: 100 });\n\n            const fileName = this.state.sourceFileName.split(\".\").shift() + \"_stegojs_\"\n                + (Math.random() * 10000).toFixed();\n\n            if (e.data.type === \"text\") {\n                const decoder = new TextDecoder(\"utf-8\");\n                // Create a view of the buffer:\n                const view = new DataView(\n                    e.data.result.buffer,\n                    0,\n                    e.data.result.buffer.byteLength,\n                );\n                // Decode the view into a text string:\n                const text = JSON.parse(decoder.decode(view));\n\n                // If the text is fairly big, save as a .txt file instead of displaying it\n                if (text.length > 1000) {\n                    this._resultTextArea.current?.setText(this.context(\"notification:text_size_too_big\"));\n                    const blob = new Blob(text, { type: \"text/plain;charset=utf-8\" });\n                    FileSaver.saveAs(blob, fileName + \".txt\");\n                } else {\n                    let resultText = text.join(\"\");\n                    this._resultTextArea.current?.setText(resultText);\n                }\n            } else if (e.data.type === \"image\") {\n                const typed = new Uint8ClampedArray(e.data.result.buffer);\n                const resultImage = new ImageData(\n                    typed,\n                    e.data.result.width,\n                    e.data.result.height,\n                );\n                // Draw the new image\n                this._resultCanvas.current?.updateImage(\n                    resultImage,\n                    fileName + \".bmp\",\n                );\n                this._resultCanvas.current?.scale(\"in\");\n            }\n\n            new Noty({\n                theme: \"nest\",\n                type: \"success\",\n                layout: \"topRight\",\n                text: this.context(\"notification:decoding_finished\", { time: e.data.done }),\n                timeout: 5000,\n            }).show();\n\n            if (this.decoder) {\n                this.decoder.terminate();\n                this.decoder = null;\n            }\n\n            setTimeout(() => {\n                this.setState({ processActive: false });\n                this.setState({ progress: 0 });\n            }, 1000);\n        }\n    }\n\n    decode = (params: { image: ImagePayload }) => {\n        if (this.state.mode === \"image\") {\n            // Check if the image is at least 4*4 pixels to perform LSB steganography on\n            if ((params.image.height < 2) || (params.image.width < 2)) {\n                new Noty({\n                    theme: \"nest\",\n                    type: \"error\",\n                    layout: \"topRight\",\n                    text: this.context(\"notification:source_size_too_small\"),\n                    timeout: 5000,\n                }).show();\n                return;\n            }\n        }\n\n        if (this.state.mode === \"image\") {\n            this._resultCanvas.current?.scale(\"out\");\n        } else {\n            this._resultTextArea.current?.resetState();\n        }\n\n        this.setState({ processActive: true });\n        this.decoder = new Worker(\n            `${process.env.PUBLIC_URL}/workers/decoder.worker.js`,\n        );\n\n        this.decoder.onmessage = this.onDecoderMessage;\n        // Pass payload to the decoder worker\n        this.decoder.postMessage({\n            ...params,\n            mode: this.state.mode,\n        }, [params.image.buffer]);\n    }\n\n    onEncoderMessage = (e: MessageEvent) => {\n        if (e.data.progressBar) {\n            this.setState({ progress: e.data.progressBar });\n        }\n\n        if (e.data.error) {\n            this.setState({ processActive: false });\n            this.setState({ progress: 0 });\n\n            new Noty({\n                theme: \"nest\",\n                type: \"error\",\n                layout: \"topRight\",\n                text: this.context(\"notification:error_noty\", { message: e.data.error }),\n                timeout: 5000,\n            }).show();\n        }\n\n        if (e.data.done) {\n            this.setState({ progress: 100 });\n\n            // Create a random file name\n            const fileName = this.state.sourceFileName.split(\".\").shift() +\n                \"_stegojs_\" + (Math.random() * 10000).toFixed();\n            // Create a TypedArray from the transferred ArrayBuffer\n            const typed = new Uint8ClampedArray(e.data.result.buffer);\n            // Create an ImageData object to draw to the canvas\n            const resultImage = new ImageData(\n                typed,\n                e.data.result.width,\n                e.data.result.height,\n            );\n\n            this._sourceCanvas.current?.updateImage(\n                resultImage, //new ImageData(new Uint8ClampedArray([123, 0, 123, 255]), 1, 1),\n                fileName + \".bmp\",\n            );\n            this._sourceCanvas.current?.scale(\"in\");\n\n            new Noty({\n                theme: \"nest\",\n                type: \"success\",\n                layout: \"topRight\",\n                text: this.context(\"notification:encoding_finished\", { time: e.data.done }),\n                timeout: 5000,\n            }).show();\n\n            if (this.encoder) {\n                this.encoder.terminate();\n                this.encoder = null;\n            }\n\n            setTimeout(() => {\n                this.setState({ processActive: false });\n                this.setState({ progress: 0 });\n            }, 1000);\n        }\n    }\n\n    encode = (params: { process: ProcessType, image?: ImagePayload, text?: TextPayload }) => {\n        this.setState({ processActive: true });\n        let payload, transferList;\n\n        // Get the source image\n        const canvas = document.getElementById(\"source-canvas\") as HTMLCanvasElement;\n        const ctx = canvas.getContext(\"2d\")!;\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const image = {\n            buffer: imageData.data.buffer,\n            width: canvas.width,\n            height: canvas.height,\n        };\n\n        // Get payload and perform checks\n        if (this.state.mode === \"image\" && params.image) {\n            // We're trying to store the payload image inside the source image\n            if (\n                (params.image.height * 2 > image.height) ||\n                (params.image.width * 2 > image.width)\n            ) {\n                if (!window.confirm(this.context(\"notification:size_mismatch_confirm\"))) {\n                    this.setState({ processActive: false });\n                    return;\n                }\n            }\n            payload = params.image;\n            transferList = [imageData.data.buffer, params.image.buffer];\n            this._resultCanvas.current?.resetState();\n        } else if (this.state.mode === \"text\" && params.text) {\n            // We're trying to store the playload text inside the source image\n            payload = params.text;\n            transferList = [imageData.data.buffer];\n            this._resultTextArea.current?.resetState();\n        } else {\n            window.alert(this.context(\"notification:unknown_operation\"));\n            console.error('Encode process \"' + this.state.mode + '\" is not recognized.');\n            return;\n        }\n\n        this._sourceCanvas.current?.scale(\"out\");\n        this.setState({ processActive: true });\n        this.encoder = new Worker(`${process.env.PUBLIC_URL}/workers/encoder.worker.js`);\n\n        this.encoder.onmessage = this.onEncoderMessage;\n        this.encoder.postMessage({\n            image: image,\n            payload: payload,\n            mode: this.state.mode,\n            proces: params.process,\n        }, transferList);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"App-content\">\n                    <div className=\"output-selector\" id=\"io-selector\">\n                        <label htmlFor=\"mode\">{this.context(\"common:payload\")}:</label>\n                        <label className=\"radio-label\">\n                            <input\n                                name=\"mode\"\n                                type=\"radio\"\n                                onChange={() => this.changeOutputMode(\"image\")}\n                                defaultChecked\n                            />\n                            <span>{this.context(\"common:image\")}</span>\n                        </label>\n                        <label className=\"radio-label\">\n                            <input\n                                name=\"mode\"\n                                type=\"radio\"\n                                onChange={() => this.changeOutputMode(\"text\")}\n                            />\n                            <span>{this.context(\"common:text\")}</span>\n                        </label>\n                    </div>\n                    <ProgressBar\n                        active={this.state.processActive}\n                        progress={this.state.progress}\n                        id=\"stego-progressbar\"\n                    />\n                    <div id=\"grid-wrapper\">\n                        <div className=\"grid-element\" id=\"source-section\">\n                            <h5 className=\"section-title\">Source image</h5>\n                            <CanvasSection\n                                ref={this._sourceCanvas}\n                                id=\"source\"\n                                sourceFileLoaded={true}\n                                onFileLoaded={(bool, name) => this.sourceFileLoaded(bool, name)}\n                                process={(params) => this.decode(params)}\n                                processName=\"decode\"\n                                isAProcessActive={this.state.processActive}\n                                clear={true}\n                                download={true}\n                            />\n                        </div>\n                        <div className=\"grid-element\" id=\"result-section\">\n                            <h5 className=\"section-title\">{this.context(\"common:payload\")}</h5>\n                            {this.state.mode === \"image\"\n                                ? (<CanvasSection\n                                    ref={this._resultCanvas}\n                                    id=\"result\"\n                                    sourceFileLoaded={this.state.sourceFileLoaded}\n                                    onFileLoaded={() => { }}\n                                    process={(params) => this.encode(params)}\n                                    isAProcessActive={this.state.processActive}\n                                    processName=\"encode\"\n                                    clear={true}\n                                    download={true}\n                                />)\n                                : (<TextAreaSection\n                                    ref={this._resultTextArea}\n                                    id=\"result\"\n                                    clear=\"true\"\n                                    sourceFileLoaded={this.state.sourceFileLoaded}\n                                    onFileLoaded={() => { }}\n                                    process={(params) => this.encode(params)}\n                                    isAProcessActive={this.state.processActive}\n                                    processName=\"encode\"\n                                />)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nHome.contextType = LangContext;\n","import React, { Component } from \"react\";\nimport LangContext from \"../../context/LangContext\";\nimport \"./ColorSelector.scss\";\n\ninterface State {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}\n\nexport default class ColorSelector extends Component<{}, State> {\n    state = {\n        r: 101,\n        g: 31,\n        b: 255,\n        a: 255,\n    };\n\n    getColor = () => this.state;\n\n    setColor = ({ r, g, b }: { r: number, g: number, b: number }) => {\n        this.setState({ r, g, b });\n    }\n\n    selectColor = (hexColor: string) => {\n        this.setState({ ...hexToRgb(hexColor) });\n    }\n\n    render() {\n        return (\n            <div className=\"color-selector\">\n                {this.context(\"color_selector:select_color\")}:\n                <input\n                    type=\"color\"\n                    onChange={(e) => this.selectColor(e.target.value)}\n                    defaultValue={rgbToHex(this.state.r, this.state.g, this.state.b)}\n                />\n                <span\n                    className=\"color-selector-preview\"\n                    style={{\n                        backgroundColor: `rgba(${Object.values(this.state).join(\",\")})`,\n                    }}\n                >\n                </span>\n            </div>\n        );\n    }\n}\n\nColorSelector.contextType = LangContext;\n\nconst hexToRgb = (hexColor: string) => {\n    const hex = hexColor.split(\"#\").pop()!;\n    const bigint = parseInt(hex, 16);\n    const r = (bigint >> 16) & 255;\n    const g = (bigint >> 8) & 255;\n    const b = bigint & 255;\n    return { r, g, b };\n}\n\nconst rgbToHex = (r: number, g: number, b: number) => {\n    const hex = \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    return hex;\n}\n\nconst componentToHex = (c: number) => {\n    const hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n}\n","import React, { Component, createRef } from \"react\";\nimport Noty from \"noty\";\nimport LangContext from \"../context/LangContext\";\nimport CanvasSection from \"../components/CanvasSection/CanvasSection\";\nimport ColorSelector from \"../components/ColorSelector/ColorSelector\";\nimport ProgressBar from \"../components/ProgressBar/ProgressBar\";\n\ninterface State {\n    processActive: boolean,\n    progress: number,\n    firstFile: boolean,\n    secondFile: boolean,\n}\n\nexport default class Comparison extends Component<{}, State> {\n    _resultCanvas = createRef<CanvasSection>();\n    _colorSelector = createRef<ColorSelector>();\n    _firstImage = createRef<CanvasSection>();\n    _secondImage = createRef<CanvasSection>();\n\n    state = {\n        processActive: false,\n        progress: 0,\n        firstFile: false,\n        secondFile: false,\n    };\n\n    differ: Worker | null = null;\n\n    firstFileLoaded = (bool: boolean, name: string) => {\n        this.setState({ firstFile: bool });\n    }\n\n    secondFileLoaded = (bool: boolean, name: string) => {\n        this.setState({ secondFile: bool });\n    }\n\n    onDifferMessage = (e: MessageEvent) => {\n        const t = this.context;\n\n        if (e.data.progressBar) {\n            this.setState({ progress: e.data.progressBar });\n        }\n\n        if (e.data.error) {\n            this.setState({ processActive: false, progress: 0 });\n\n            new Noty({\n                theme: \"nest\",\n                type: \"error\",\n                layout: \"topRight\",\n                text: t(\"notification:error_noty\", { message: e.data.error }),\n                timeout: 2000,\n            }).show();\n        }\n\n        if (e.data.done) {\n            this.setState({ progress: 100 });\n\n            const fileName = \"diff_stegojs_\" + (Math.random() * 10000).toFixed();\n\n            // Image mode result\n            // Create a TypedArray from the transferred ArrayBuffer\n            const typed = new Uint8ClampedArray(e.data.result.buffer);\n            // Create an ImageData object to draw to the canvas\n            const resultImage = new ImageData(\n                typed,\n                e.data.result.width,\n                e.data.result.height,\n            );\n            // Draw the new image\n            this._resultCanvas.current?.updateImage(\n                resultImage,\n                fileName + \".bmp\",\n            );\n            this._resultCanvas.current?.scale(\"in\");\n\n            new Noty({\n                theme: \"nest\",\n                type: \"success\",\n                layout: \"topRight\",\n                text: t(\"notification:diffing_finished\", { time: e.data.done }),\n                timeout: 5000,\n            }).show();\n\n            if (this.differ) {\n                this.differ.terminate();\n                this.differ = null;\n            }\n\n            setTimeout(() => {\n                this.setState({ processActive: false, progress: 0 });\n            }, 1000);\n        }\n    }\n\n    diff = () => {\n        this._resultCanvas.current?.resetState();\n\n        // Get the first image\n        const canvas = document.getElementById(\"first-image-canvas\") as HTMLCanvasElement;\n        const ctx = canvas.getContext(\"2d\")!;\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const firstImage: ImagePayload = {\n            buffer: imageData.data.buffer,\n            width: canvas.width,\n            height: canvas.height,\n        };\n\n        // Get the second image\n        const canvas2 = document.getElementById(\"second-image-canvas\") as HTMLCanvasElement;\n        const ctx2 = canvas2.getContext(\"2d\")!;\n        const imageData2 = ctx2.getImageData(0, 0, canvas2.width, canvas2.height);\n        const secondImage: ImagePayload = {\n            buffer: imageData2.data.buffer,\n            width: canvas2.width,\n            height: canvas2.height,\n        };\n\n        // Merge params\n        const payload = {\n            process: \"diff\",\n            mode: \"image\",\n            diffColor: this._colorSelector.current?.getColor(),\n            first: firstImage,\n            second: secondImage,\n        };\n        const transferList = [firstImage.buffer, secondImage.buffer];\n\n        this._resultCanvas.current?.scale(\"out\");\n\n        this.setState({ processActive: true });\n        this.differ = new Worker(`${process.env.PUBLIC_URL}/workers/differ.worker.js`);\n        this.differ.onmessage = this.onDifferMessage;\n        this.differ.postMessage(payload, transferList);\n    }\n\n    render() {\n        return (\n            <div className=\"App-content pad-top\">\n                <ProgressBar\n                    active={this.state.processActive}\n                    progress={this.state.progress}\n                />\n                <div id=\"grid-wrapper-vertical\">\n                    <div\n                        className=\"grid-element\"\n                        id=\"first-section\"\n                        style={{ gridColumnStart: 1 }}\n                    >\n                        <h5 className=\"section-title\">{this.context(\"comparison:first_image\")}</h5>\n                        <CanvasSection\n                            ref={this._firstImage}\n                            id=\"first-image\"\n                            onFileLoaded={(bool, name) => this.firstFileLoaded(bool, name)}\n                            isAProcessActive={this.state.processActive}\n                            hideCanvas\n                        />\n                    </div>\n                    <div\n                        className=\"grid-element\"\n                        id=\"second-section\"\n                        style={{ gridColumnStart: 1 }}\n                    >\n                        <h5 className=\"section-title\">{this.context(\"comparison:second_image\")}</h5>\n                        <CanvasSection\n                            ref={this._secondImage}\n                            id=\"second-image\"\n                            sourceFileLoaded={true}\n                            onFileLoaded={(bool, name) => this.secondFileLoaded(bool, name)}\n                            isAProcessActive={this.state.processActive}\n                            hideCanvas\n                        />\n                    </div>\n                    <div\n                        className=\"grid-element\"\n                        id=\"highlight-section\"\n                        style={{ gridColumnStart: 1 }}\n                    >\n                        <h5 className=\"section-title\">{this.context(\"comparison:diff_color\")}</h5>\n                        <ColorSelector ref={this._colorSelector} />\n                    </div>\n\n                    <div\n                        className=\"grid-element\"\n                        id=\"result-section\"\n                        style={{ gridRow: \"1 / span 4\", gridColumnStart: 2 }}\n                    >\n                        <h5 className=\"section-title\">{this.context(\"common:difference\")}</h5>\n                        <CanvasSection\n                            ref={this._resultCanvas}\n                            id=\"result-image\"\n                            disableInput\n                        />\n                        <div className=\"section-actions\">\n                            <button\n                                className=\"waves-effect waves-light btn grey darken-4\"\n                                disabled={!this.state.firstFile || !this.state.secondFile ||\n                                    this.state.processActive}\n                                onClick={this.diff}\n                                style={{ margin: \"auto\" }}\n                            >\n                                {this.context(\"common:compare\")}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nComparison.contextType = LangContext;\n","import React from \"react\";\n\nexport default function Info() {\n    return (\n        <div>\n            <div className=\"App-content pad-top\">\n                <div className=\"how\">\n                    <div className=\"row\">\n                        <div className=\"col s12 m6\">\n                            <h4>What is steganography?</h4>\n                            <blockquote>\n                                <strong>Steganography</strong>\n                                is the practice of concealing a file, message, image, or video\n                                within another file, message, image, or video.\n                            </blockquote>\n                            <p>\n                                The advantage of steganography over cryptography alone is that\n                                the intended secret message does not attract attention to itself\n                                as an object of scrutiny. Plainly visible encrypted messages —\n                                no matter how unbreakable — arouse interest, and may in\n                                themselves be incriminating in countries where encryption is\n                                illegal. Thus, whereas cryptography is the practice of\n                                protecting the contents of a message alone, steganography is\n                                concerned with <strong> concealing the fact that a secret message is being sent at all </strong>, as well as concealing the contents of the message.\n                            </p>\n                        </div>\n\n                        <div className=\"col s12 m6\">\n                            <h4>Digital steganography</h4>\n                            <p>\n                                Steganography includes the concealment of information within computer files. In <strong>digital steganography</strong>, electronic communications may include steganographic coding inside of a transport layer, such as a document file,  image file, program or protocol. <strong>Media files</strong> are ideal for steganographic transmission because of their large size.\n                            </p>\n                            <p>\n                                For example, a sender might start with an innocuous image file\n                                and adjust the color of every 100th pixel to correspond to a\n                                letter in the alphabet, a change so subtle that someone not\n                                specifically looking for it is unlikely to notice it.\n                            </p>\n                            <p>\n                                Read below about this application's implementation of digital\n                                steganography.\n                            </p>\n                            <p>\n                                <small>\n                                    source: <strong>\n                                        <a\n                                            href=\"https://en.wikipedia.org/wiki/Steganography\"\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            WikiPedia\n                                    </a>\n                                    </strong>\n                                </small>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"how\">\n                    <h4>How is it done?</h4>\n                    <p>\n                        This section covers the process of encoding and decoding text from a\n                        steganograpic image.\n                    </p>\n                    <div className=\"row\">\n                        <div className=\"col s12 m6\">\n                            <h5 className=\"section-title\">\n                                Decoding\n                                <small>- reading the hidden data</small>\n                            </h5>\n\n                            <strong>Step 1:</strong>\n                            <p>\n                                We draw the selected image to a canvas (sometimes in the\n                                background), then read it pixel-by-pixel. Each pixel is stored as an array of four 8bit values: <em>red, green, blue and alpha (transparency)</em> respectively.\n                            </p>\n                            <pre><code>{`[125, 48, 210, 255]`}</code></pre>\n\n                            <strong>Step 2:</strong>\n                            <p>\n                                These values are then converted to binary.\n                            </p>\n                            <pre>\n                                <code>{`[01111101, 00110000, 11010010, 11111111]`}</code>\n                            </pre>\n\n                            <strong>Step 3:</strong>\n                            <p>\n                                We extract the steganographic, <em>hidden</em> data by taking the last 2 bits of every byte of each pixel.\n                            </p>\n                            <pre>\n                                <code>\n                                    {`[01111101, 00110000, 11010010, 11111111]`}\n                                    <br />\n                                    {`[      01,       00,       10,       11]`}\n                                </code>\n                            </pre>\n\n                            <strong>Step 4:</strong>\n                            <p>\n                                The two least significant, steganographic bits are concatenated\n                                in pairs of 4 into 1 bytes each.\n                            </p>\n                            <pre>\n                                <code>{`[...01, ...00, ...10, ...11]`} =&gt; 01001011</code>\n                            </pre>\n\n                            <strong>Step 5:</strong>\n                            <p>\n                                Finally, the bytes are cast to integers, then converted to the\n                                appropriate ASCII characters, revealing the steganographic data\n                                hidden in the image (if there is any).\n                            </p>\n                            <pre><code>01001011 =&gt; 075 =&gt; K</code></pre>\n                        </div>\n\n                        <div className=\"col s12 m6\">\n                            <h5 className=\"section-title\">\n                                Encoding\n                                <small>- hiding your own data</small>\n                            </h5>\n\n                            <strong>Step 1:</strong>\n                            <p>\n                                Each character of the message is converted to the ASCII number\n                                representation of it, then cast to a single byte.\n                            </p>\n                            <pre><code>a =&gt; 097 =&gt; 01100001</code></pre>\n\n                            <strong>Step 2:</strong>\n                            <p>\n                                Each byte is cut into 4*2 bits\n                            </p>\n                            <pre><code>01100001 =&gt; {`01, 10, 00, 01`}</code></pre>\n\n                            <strong>Step 3:</strong>\n                            <p>\n                                During the decoding proccess, we stored the 8bit representation\n                                of the rgba data of each pixel in the original image to avoid\n                                parsing it twice. The bit-pairs from the last step replace the\n                                last two bits of every byte in the original image.\n                            </p>\n                            <pre>\n                                <code>\n                                    original: {`01111101, 00110000, 11010010, 11111111`}\n                                    <br />message: {`      01,       10,       00,       01`}\n                                    <br />new: {`01111101, 00110010, 11010000, 11111101`}\n                                </code>\n                            </pre>\n\n                            <strong>Step 4:</strong>\n                            <p>\n                                The new byte data (with the message injected) is cast to\n                                the <em>red, green, blue and alpha</em> channels' integer values. The resulting objects can then be drawn onto the canvas as pixels of the new, steganographic image.\n                            </p>\n                            <pre><code>{`[125, 50, 208, 253]`}</code></pre>\n\n                            <strong>Note:</strong>\n                            <p>\n                                Comparing a pixel from the original image with the same pixel\n                                injected with one character of the secret message, we can see\n                                that the rgb color and alpha values have not changed\n                                drastically. This change is mostly undetectable by the human\n                                eye.\n                            </p>\n                            <pre>\n                                <code>\n                                    original: <div className=\"pixel\" id=\"p1\"></div>\n                                    {`[125, 48, 210, 255]`}\n                                    <br />new: <div className=\"pixel\" id=\"p2\"></div>\n                                    {`[125, 50, 208, 253]`}\n                                </code>\n                            </pre>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.scss\";\n\ninterface LinkObject {\n    path: string;\n    name: string;\n}\n\ninterface Props {\n    basePath: string;\n    links: LinkObject[];\n}\n\nexport default function Header(props: Props) {\n    const [currentPath, setCurrentPath] = useState(props.basePath);\n\n    const links = props.links.map((value: LinkObject, i: number) =>\n        <Link\n            key={i}\n            to={props.basePath + value.path}\n            id={value.name || \"\"}\n            className={currentPath === value.path ? \"active\" : \"\"}\n            onClick={() => setCurrentPath(value.path)}\n        >\n            {value.name}\n        </Link>\n    );\n\n    return (\n        <header className=\"App-header grey darken-4\">\n            <h5 className=\"App-title pink-text text-darken-1\">\n                <small>\n                    <strong><a href=\"https://komlosidev.net/\">thavixt</a> /</strong>\n                </small>\n                <a href={props.basePath}>steganography.js</a>\n            </h5>\n            <span className=\"App-links pink-text text-darken-1\">\n                {links}\n            </span>\n        </header>\n    );\n}\n","import React, { useContext } from \"react\";\nimport LangContext from \"../../context/LangContext\";\nimport \"./Footer.scss\";\n\nexport default function Footer() {\n    const t = useContext(LangContext);\n\n    return (\n        <footer className=\"App-footer grey darken-4 page-footer\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col l6 s12\">\n                        <h5 className=\"pink-text text-darken-1\">Steganography.js</h5>\n                        <p className=\"pink-text text-darken-1\">\n                            {t(\"footer:inspired_by\")} - <em>\n                                <a\n                                    href=\"https://www.youtube.com/watch?v=TWEXCYQKyDc\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Secrets Hidden in Images\n                                </a>\n                            </em>\n                        </p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"footer-copyright\">\n                <div className=\"container pink-text text-darken-1\">\n                    <a\n                        className=\"pink-text text-darken-1 right\"\n                        href=\"https://github.com/thavixt/steganography-js\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        github\n                    </a>\n                </div>\n            </div>\n        </footer>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport i18next from \"i18next\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"noty/lib/noty.css\";\nimport \"noty/lib/themes/nest.css\";\nimport \"./App.scss\";\nimport HomePage from \"./pages/Home\";\nimport ComparisonPage from \"./pages/Comparison\";\nimport InfoPage from \"./pages/Info\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\nimport LangContext from \"./context/LangContext\";\nimport translations from \"./translations/translations.json\";\n\nconst pages = [\n    { name: \"stego\", path: \"\" },\n    { name: \"compare\", path: \"compare\" },\n    { name: \"info\", path: \"info\" },\n];\n\ninterface Props {\n    basePath: string;\n}\n\nexport default function App(props: Props) {\n    const [translator, setTranslator] = useState<Function | null>(null);\n\n    useEffect(() => {\n        i18next.init({\n            lng: \"en\",\n            // debug: true,\n            resources: translations,\n        }).then((t) => {\n            setTranslator(() => t);\n        });\n    }, []);\n\n    if (!translator) {\n        return <p>loading...</p>;\n    }\n\n    return (\n        <LangContext.Provider value={translator}>\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Header links={pages} basePath={props.basePath} />\n                    <main className=\"App-main\">\n                        <Route\n                            exact\n                            path={props.basePath + \"\"}\n                            render={() => <HomePage />}\n                        />\n                        <Route\n                            path={props.basePath + \"compare\"}\n                            render={() => <ComparisonPage />}\n                        />\n                        <Route\n                            path={props.basePath + \"info\"}\n                            render={() => <InfoPage />}\n                        />\n                    </main>\n                    <Footer />\n                </div>\n            </BrowserRouter>\n        </LangContext.Provider>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n//import * as serviceWorker from './serviceWorker';\n\nconst basePath = process.env.NODE_ENV === \"production\"\n    ? process.env.REACT_APP_BASE_PATH as string\n    : \"/\";\n\n/** \n * Check API support, hardware & battery, then start app & register service worker\n*/\nconst check = () => {\n    // Check for API support\n    if (\n        !(window.Worker && window.Promise && window.fetch &&\n            window.File && window.FileReader && window.FileList &&\n            window.Blob && window.TextDecoder && window.TextEncoder)\n    ) {\n        alert(\n            \"Your browser is not up-to-date. The application MAY NOT WORK. \\rTry using the latest version of Chrome, Edge or Firefox.\",\n        );\n        // Log required APIs\n        console.error(\n            \"The required APIs are not fully supported in this browser.\\nTry using the latest version of Chrome, Edge or Firefox.\\nThe required APIs are:\\nBlob, fetch, File, FileReader, FileList, Promise, TextDecoder, Worker\",\n        );\n    }\n    // The below checks are only really important for mobile use:\n    // Check for at least 1GB usable memory (important for big image files)\n    if (navigator.deviceMemory && navigator.deviceMemory < 2) {\n        console.warn(\"Low device memory detected:\", navigator.deviceMemory + \"GB\");\n    }\n    // Check for at least 3 cores / threads (main + 2 workers)\n    if (navigator.hardwareConcurrency < 2) {\n        console.warn(\n            \"Low number of CPU threads detected:\",\n            navigator.hardwareConcurrency,\n        );\n    }\n\n    ReactDOM.render(<App basePath={basePath} />, document.getElementById(\"root\"));\n\n    // serviceWorker.register();\n};\n\ncheck();\n"],"sourceRoot":""}